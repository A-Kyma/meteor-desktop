"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));

var _assignIn = _interopRequireDefault(require("lodash/assignIn"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _log = _interopRequireDefault(require("./log"));

var _defaultDependencies = _interopRequireDefault(require("./defaultDependencies"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
const {
  join
} = _path.default;
/**
 * Wrapper around electron-packager.
 * @class
 */

class ElectronPackager {
  constructor($) {
    this.log = new _log.default('electron-packager');
    this.$ = $;
  }

  async init() {
    this.packager = (await this.$.getDependency('electron-packager', _defaultDependencies.default['electron-packager'])).dependency;
  }
  /**
   * Runs the packager with provided arguments.
   *
   * @param {Object} args
   * @returns {Promise}
   */


  runPackager(args) {
    return new Promise((resolve, reject) => {
      this.packager(args, err => {
        if (err) {
          reject(err);
        } else {
          this.log.info(`wrote packaged app to ${this.$.env.paths.packageDir}`);
          resolve();
        }
      });
    });
  }

  async packageApp() {
    const {
      version
    } = JSON.parse(_fs.default.readFileSync(join(this.$.env.paths.meteorApp.root, 'node_modules', 'electron', 'package.json'), 'UTF-8'));
    const settings = this.$.desktop.getSettings();
    const {
      name
    } = settings;

    if (!name) {
      this.log.error('`name` field in settings.json not set');
      process.exit(1);
    }

    const arch = this.$.env.options.ia32 ? 'ia32' : 'x64';
    this.log.info(`packaging '${name}' for platform '${this.$.env.sys.platform}-${arch}'` + ` using electron v${version}`);

    try {
      await this.$.utils.rmWithRetries('-rf', _path.default.join(this.$.env.options.output, this.$.env.paths.packageDir));
    } catch (e) {
      throw new Error(e);
    }

    const args = {
      name,
      arch,
      prune: false,
      electronVersion: version,
      platform: this.$.env.sys.platform,
      dir: this.$.env.paths.electronApp.root,
      out: _path.default.join(this.$.env.options.output, this.$.env.paths.packageDir)
    };

    if ('packagerOptions' in settings) {
      const {
        packagerOptions
      } = settings;
      ['windows', 'linux', 'osx'].forEach(system => {
        if (this.$.env.os[`is${system[0].toUpperCase()}${system.substring(1)}`] && `_${system}` in packagerOptions) {
          (0, _assignIn.default)(packagerOptions, packagerOptions[`_${system}`]);
        }
      });
      Object.keys(packagerOptions).forEach(field => {
        if (packagerOptions[field] === '@version') {
          packagerOptions[field] = settings.version;
        }
      });
      (0, _assignIn.default)(args, packagerOptions);
    } // Move node_modules away. We do not want to delete it, just temporarily remove it from
    // our way.


    _fs.default.renameSync(this.$.env.paths.electronApp.nodeModules, this.$.env.paths.electronApp.tmpNodeModules);

    let extracted = false;

    if (this.$.utils.exists(this.$.env.paths.electronApp.extractedNodeModules)) {
      _fs.default.renameSync(this.$.env.paths.electronApp.extractedNodeModules, this.$.env.paths.electronApp.nodeModules);

      extracted = true;
    }

    try {
      await this.runPackager(args);
    } finally {
      if (extracted) {
        _shelljs.default.rm('-rf', this.$.env.paths.electronApp.extractedNodeModules);

        _shelljs.default.rm('-rf', this.$.env.paths.electronApp.nodeModules);
      } // Move node_modules back.


      _fs.default.renameSync(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);
    }
  }

}

exports.default = ElectronPackager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,