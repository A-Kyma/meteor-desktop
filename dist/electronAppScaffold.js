"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));

var _fs = _interopRequireDefault(require("fs"));

var _del = _interopRequireDefault(require("del"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _path = _interopRequireDefault(require("path"));

var _log = _interopRequireDefault(require("./log"));

var _skeletonDependencies = _interopRequireDefault(require("./skeletonDependencies"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
const {
  join
} = _path.default;
_shelljs.default.config.fatal = true;
/**
 * Represents the .desktop dir scaffold.
 */

class ElectronAppScaffold {
  /**
   * @param {MeteorDesktop} $ - context
   * @constructor
   */
  constructor($) {
    this.log = new _log.default('electronAppScaffold');
    this.$ = $;
    this.packageJson = {
      name: 'MyMeteorApp',
      main: this.$.env.isProductionBuild() ? 'app.asar/index.js' : 'app/index.js',
      dependencies: Object.assign({}, _skeletonDependencies.default)
    };

    if (!this.$.env.isProductionBuild() || this.$.env.options.prodDebug) {
      this.packageJson.dependencies.devtron = '1.4.0';
      this.packageJson.dependencies['electron-debug'] = '1.5.0';
    }
  }
  /**
   * Just a public getter from the default package.json object.
   * @returns {Object}
   */


  getDefaultPackageJson() {
    return Object.assign({}, this.packageJson);
  }
  /**
   * Clear the electron app. Removes everything except the node_modules which would be a waste
   * to delete. Later `npm prune` will keep it clear.
   */


  clear() {
    if (!this.$.utils.exists(this.$.env.paths.electronApp.root)) {
      this.log.verbose(`creating ${this.$.env.paths.electronApp.rootName}`);

      _shelljs.default.mkdir(this.$.env.paths.electronApp.root);
    }

    return (0, _del.default)([`${this.$.env.paths.electronApp.root}${_path.default.sep}*`, `!${this.$.env.paths.electronApp.nodeModules}`], {
      force: true
    });
  }
  /**
   * Just copies the Skeleton App into the electron app.
   */


  copySkeletonApp() {
    this.log.verbose('copying skeleton app');

    try {
      _shelljs.default.cp('-rf', join(this.$.env.paths.meteorDesktop.skeleton, '*'), this.$.env.paths.electronApp.appRoot + _path.default.sep);
    } catch (e) {
      this.log.error('error while copying skeleton app:', e);
      process.exit(1);
    }
  }
  /**
   * After clearing the electron app path, copies a fresh skeleton.
   */


  async make() {
    try {
      this.log.verbose(`clearing ${this.$.env.paths.electronApp.rootName}`);
      await this.clear();
    } catch (e) {
      this.log.error(`error while removing ${this.$.env.paths.electronApp.root}: `, e);
      process.exit(1);
    }

    this.createAppRoot();
    this.copySkeletonApp(); // TODO: hey, wait, .gitignore is not needed - right?

    /*
    this.log.debug('creating .gitignore');
    fs.writeFileSync(this.$.env.paths.electronApp.gitIgnore, [
        'node_modules'
    ].join('\n'));
    */

    this.log.verbose('writing package.json');

    _fs.default.writeFileSync(this.$.env.paths.electronApp.packageJson, JSON.stringify(this.packageJson, null, 2));
  }
  /**
   * Creates the app directory in the electron app.
   */


  createAppRoot() {
    try {
      this.log.verbose(`creating ${this.$.env.paths.electronApp.appRoot}`);

      _fs.default.mkdirSync(this.$.env.paths.electronApp.appRoot);
    } catch (e) {
      if (e.code !== 'EEXIST') {
        this.log.error(`error while creating dir: ${this.$.env.paths.electronApp.appRoot}: `, e);
        process.exit(1);
      }
    }
  }

}

exports.default = ElectronAppScaffold;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,